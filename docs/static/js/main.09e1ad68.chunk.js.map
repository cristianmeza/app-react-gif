{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","components/CollectionGhipy.js","hooks/useFetchGifs.js","components/GifsExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","categories","setMessage","useState","value","setValue","onSubmit","e","preventDefault","find","category","type","onChange","target","GifItem","id","title","url","className","src","alt","getGifs","a","encodeURI","fetch","request","json","data","map","item","images","downsized_medium","CollectionGhipy","loading","state","setState","useEffect","gifs","useFetchGifs","img","GifsExpertApp","message","i","ReactDOM","render","document","getElementById"],"mappings":"+KAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cC+BCQ,EAnCK,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EAExCC,mBAAS,IAF+B,mBAE3DC,EAF2D,KAEpDC,EAFoD,KAoBlE,OACC,sBAAMC,SAbc,SAACC,GACrBA,EAAEC,iBAEEP,EAAWQ,MAAK,SAAAC,GAAQ,OAAIA,IAAaN,KAC5CF,EAAW,qCAEXF,GAAc,SAAAU,GAAQ,OAAKN,GAAL,mBAAeM,OACrCL,EAAS,IACTH,EAAW,MAKZ,SACC,uBACCS,KAAK,OACLP,MAAQA,EACRQ,SArBuB,SAAAL,GACzBF,EAASE,EAAEM,OAAOT,a,QCILU,EAVC,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE7B,OACC,sBAAKC,UAAU,yCAAf,UACC,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCPFK,EAAO,uCAAG,WAAOX,GAAP,qBAAAY,EAAA,6DACTL,EADS,iDACwCM,UAAWb,GADnD,+DAGOc,MAAMP,GAHb,cAGTQ,EAHS,gBAIQA,EAAQC,OAJhB,uBAIPC,EAJO,EAIPA,KAJO,kBAMRA,EAAKC,KAAI,SAAAC,GACf,MAAO,CACNd,GAAIc,EAAKd,GACTC,MAAOa,EAAKb,MACZC,IAAKY,EAAKC,OAAOC,iBAAiBd,SAVrB,2CAAH,sDCmDEe,EA5CS,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECJd,SAACA,GAAc,IAAD,EACfP,mBAAS,CAClCwB,KAAM,GACNM,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAuBzC,OAVAC,qBAAU,WACTf,EAASX,GACPjB,MAAK,SAAA4C,GACLF,EAAS,CACRR,KAAMU,EACNJ,SAAS,SAGV,CAACvB,IAEGwB,EDjB0BI,CAAa5B,GAAjCoB,EAF4B,EAEjCH,KAAaM,EAFoB,EAEpBA,QAcrB,OACC,qCACC,oBAAIf,UAAU,oCAAd,SAAoDR,IACpD,sBAAKQ,UAAU,YAAf,UAEEe,GAAW,mBAAGf,UAAU,uCAAb,yBAMXY,EAAOF,KAAI,SAAAW,GAAG,OAEb,aADA,CACC,EAAD,eAEMA,GADCA,EAAIxB,cEiBFyB,EA/CO,WAAO,IAAD,EAESrC,mBAAS,CAAC,kBAFnB,mBAEpBF,EAFoB,KAERD,EAFQ,OAGGG,mBAAS,MAHZ,mBAGpBsC,EAHoB,KAGXvC,EAHW,KAc3B,OACC,gCACC,+CACA,uBAEA,cAAC,EAAD,CACCF,cAAgBA,EAChBC,WAAaA,EACbC,WAAaA,IAMbuC,GAAW,4BAAG,uEAIdxC,EAAW2B,KAAI,SAACC,EAAMa,GAAP,OACd,cAAC,EAAD,CAEChC,SAAWmB,GADLA,UChCZc,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BxD,M","file":"static/js/main.09e1ad68.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories, categories, setMessage }) => {\r\n\r\n\tconst [value, setValue] = useState('')\r\n\r\n\tconst handleChangeInput = e => {\r\n\t\tsetValue(e.target.value)\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\r\n\t\tif (categories.find(category => category === value)) {\r\n\t\t\tsetMessage('La categoría ya fue ingresada')\r\n\t\t} else {\r\n\t\t\tsetCategories(category => [value, ...category])\r\n\t\t\tsetValue('')\r\n\t\t\tsetMessage('')\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={ handleSubmit }>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={ value }\r\n\t\t\t\tonChange={ handleChangeInput }\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","import React from 'react'\r\n\r\nconst GifItem = ({ id, title, url }) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__bounce\">\r\n\t\t\t<img src={ url } alt={ title } />\r\n\t\t\t<p>{ title }</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GifItem","const getGifs = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=ET99j9Ucvoe1oU7HDJvhgVbruxXKahH0&limit=10`\r\n\r\n\tconst request = await fetch(url)\r\n\tconst { data } = await request.json()\r\n\r\n\treturn data.map(item => {\r\n\t\treturn {\r\n\t\t\tid: item.id,\r\n\t\t\ttitle: item.title,\r\n\t\t\turl: item.images.downsized_medium.url\r\n\t\t}\r\n\t})\r\n}\r\n\r\nexport { getGifs };","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Custom\r\nimport GifItem from './GifItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst CollectionGhipy = ({ category }) => {\r\n\r\n\tconst { data:images, loading } = useFetchGifs(category)\r\n\t//Renombrando data por images\r\n\r\n\r\n\t// const [count, setCount] = useState(0)\r\n\t// const [gifs, setGifs] = useState([])\r\n\r\n\t// useEffect(() => {\r\n\t// \tgetGifs( category ).then(setGifs)\r\n\t// \t//Si solo se usa el primer argumento que devuelve then, en vez de usar then(response => setGifs(response)), solo se usa el nombre de la funcion (setGifs) o un console.log.\r\n\t// }, [category]) //Cuando category cambia, se renderiza el componente\r\n\r\n\t//El segundo parametro de useEffect es un array de dependencias. Si queda vacío, quiere decir que lo que está dentro de useEffect se ejecutará solo una vez o la primera vez que se ejecute el componente. En caso de poner por ejemplo count dentro de los parentesis, getGifsFromGhiphy se ejecutaría cada vez que count cambie\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{\r\n\t\t\t\t\tloading && <p className=\"animate__animated animate__bounceOut\">Cargando...</p>\r\n\t\t\t\t}\r\n\t\t\t\t{/*<h3>{ category } - { count }</h3>*/}\r\n\t\t\t\t{/*<button onClick={ () => setCount(count + 1) }>Añadir</button>*/}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\timages.map(img => (\r\n\t\t\t\t\t\t//Renombrando data por images\r\n\t\t\t\t\t\t<GifItem\r\n\t\t\t\t\t\t\tkey={ img.id }\r\n\t\t\t\t\t\t\t{ ...img } //Enviando el objeto imagen como un objeto destructurado\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nCollectionGhipy.propTypes = {\r\n\tcategory: PropTypes.string\r\n}\r\n\r\nexport default CollectionGhipy","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t})\r\n\r\n\t// setTimeout( () => {\r\n\t// \tsetState({\r\n\t// \t\tdata: [1, 2, 3, 4],\r\n\t// \t\tloading: false\r\n\t// \t})\r\n\t// }, 3000)\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs( category )\r\n\t\t\t.then(gifs => {\r\n\t\t\t\tsetState({\r\n\t\t\t\t\tdata: gifs,\r\n\t\t\t\t\tloading: false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}, [category])\r\n\r\n\treturn state;\r\n}","\r\nimport React, { useState } from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nimport AddCategory from './AddCategory'\r\nimport CollectionGhipy from './CollectionGhipy';\r\n\r\nconst GifsExpertApp = () => {\r\n\r\n\tconst [categories, setCategories] = useState(['Spiderman PS4'])\r\n\tconst [message, setMessage] = useState(null)\r\n\r\n\t// const handleAddCategory = () => {\r\n\t// \tif (categories.find(category => category === 'Ezio')) {\r\n\t// \t\tsetMessage('La categoría ya fue agregada')\r\n\t// \t} else {\r\n\t// \t\t// setCategories([...categories, 'Ezio'])\r\n\t// \t\tsetCategories(cats => [...cats, 'Ezio']) //cats tiene el estado de todas las categorías\r\n\t// \t}\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>GifsExpertApp</h2>\r\n\t\t\t<hr />\r\n\r\n\t\t\t<AddCategory\r\n\t\t\t\tsetCategories={ setCategories }\r\n\t\t\t\tcategories={ categories }\r\n\t\t\t\tsetMessage={ setMessage }\r\n\t\t\t/>\r\n\r\n\t\t\t{/*<button onClick={ handleAddCategory }>Añadir categoría</button>*/}\r\n\r\n\t\t\t{\r\n\t\t\t\tmessage && <p><strong>La categoría ya fue agregada</strong></p>\r\n\t\t\t}\r\n\r\n\t\t\t{\r\n\t\t\t\tcategories.map((item, i) => (\r\n\t\t\t\t\t<CollectionGhipy\r\n\t\t\t\t\t\tkey={ item }\r\n\t\t\t\t\t\tcategory={ item }\r\n\t\t\t\t\t/>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// GifsExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifsExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css'\nimport reportWebVitals from './reportWebVitals';\n\n//Custom Components\nimport GifsExpertApp from './components/GifsExpertApp';\n\nReactDOM.render(\n    <GifsExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}